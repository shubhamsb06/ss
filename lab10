A) Write a C/Java program that creates a zombie and then calls system to execute the ps command to
verify that the process is zombie.
#include<stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
int main()
{
pid_t child_pid;
child_pid = fork ();
if (child_pid > 0)
{
printf("This is the parent process: %d. Sleep for a minute\n",getpid());
sleep (60);
}
else
{
printf("This is the child process: %d. Exit immediately\n",getpid());
exit (0);
}
system("ps -e -o pid,ppid,stat,cmd");
return 0;
}

Output:
Command to compile : gcc filename.c
Command to run the code : ./a.out

B) Write a C/Java program to avoid zombie process by forking twice.
#include<stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
int main()
{
pid_t pid;
if ((pid=fork())< 0)
{
printf("Fork error");
}
else if( pid==0)
{
printf("first child pid=%d\n", getpid());

if((pid=fork())< 0)
printf("Fork error");
else if( pid > 0)
exit(0);
sleep(5);
printf("second child pid = %d\n parent pid=%d\n", getpid(), getppid());
exit (0);
}
}
Output:
Command to compile : gcc filename.c
Command to run the code : ./a.out
